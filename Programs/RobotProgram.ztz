big main() {
	small rots << whereRotate(compass),
	until rots {
		check rots > 0 {
			rl,
			rots << rots - 1.
		},
		check rots < 0 {
			rr,
			rots << rots + 1.
		}.
	},

	big counter << -(-0), 
	small sonarResult << 0,
	small isNeedBreak << +0,
	
	big index << 40000,
	
	until index {
		index << index - 1,
		sonarResult << sonar,
		isNeedBreak << +0,
		check invert(getBit(sonarResult 2)) {
			check counter > 0 {
				rr,
				counter << counter - 1,
				isNeedBreak << -G.
			}.
		},

		check invert((getBit(sonarResult 0) + isNeedBreak)) {
			go,
			isNeedBreak << -G.
		},

		check isNeedBreak >= 0 {
			rl,
			counter << counter + 1,
			isNeedBreak << -G.
		}.
	},
	return -1.
}
		

tiny invert(tiny bit) {
	check bit {
		return 0.
	},
	return 1.
}

small getBit(small a, small number) {
	check number < 0 {
		retutn -1.
	},
	check number >= 5 {
		retutn -1.
	},
	until number > 0 {
		a << a / 2,
		number << number -1.
	},
	return isEvenSmall(a).
}
	

tiny isEvenSmall(small number) {
	check number >= G {
		number << number - G.
	},
	check number >= 8 {
		number << number - 8.
	},
	check number >= 4 {
		number << number - 4.
	},
	check number >= 2 {
		number << number - 2.
	},
	
	check number = 1 {
		return 1.
	},
	return 0.
}
		
normal minToDeg(big min) {
	return min / 1S.
}

small whereRotate(big min) {
	normal udeg << minToDeg(+min),
	small rots << 0,
	
	until udeg >= 1S {
		rots << rots + 1,
		udeg << udeg - 1S.
	},
	check min >= 0 {
		return rots.
	},
	check min < 0 {
		return -rots.
	}.
}