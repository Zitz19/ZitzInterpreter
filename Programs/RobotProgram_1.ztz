big main() {
	big counter << -(-0), 
	small sonarResult << 0,
	small isNeedBreak << -(-0),
	
	big index << 40000,
	tiny bit2 << 0,
	until index {
		index << index - 1,
		sonarResult << sonar,
		
		print sonarResult,
		
		isNeedBreak << 0,
		
		bit2 << getBit(sonarResult 2),
		print bit2,
		
		check invert(getBit(sonarResult 2)) {
			check counter > 0 {
				rr,
				counter << counter - 1,
				isNeedBreak << -16.
			}.
		},

		check invert((getBit(sonarResult 0)) + isNeedBreak) {
			go,
			isNeedBreak << -16.
		},

		check isNeedBreak >= 0 {
			rl,
			counter << counter + 1,
			isNeedBreak << -16.
		}.
	},	
	return -1.
}
		
tiny invert(tiny bit) {
	check bit {
		return 0.
	},
	return 1.
}

small getBit(small a, small number) {
	check (number < 0) + (number >= 5) {
		return -1.
	},
	
	until number > 0 {
		a << a / 2,
		number << number -1.
	},
	return isNotEvenSmall(a).
}

tiny isEvenSmall(small number) {
	check number >= G {
		number << number - G.
	},
	check number >= 8 {
		number << number - 8.
	},
	check number >= 4 {
		number << number - 4.
	},
	check number >= 2 {
		number << number - 2.
	},

	check number = 1 {
		return 0.
	},
	return 1.
}

tiny isNotEvenSmall(small number) {
	check number >= G {
		number << number - G.
	},
	check number >= 8 {
		number << number - 8.
	},
	check number >= 4 {
		number << number - 4.
	},
	check number >= 2 {
		number << number - 2.
	},

	check number = 1 {
		return 1.
	},
	return 0.
}
	